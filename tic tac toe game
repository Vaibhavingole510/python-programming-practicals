def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

# Function to check if there's a winner
def check_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if all([cell == player for cell in row]):
            return True

    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True

    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True

    return False

# Function to check if the board is full (a draw)
def check_draw(board):
    for row in board:
        if ' ' in row:
            return False
    return True

# Function to make a move
def make_move(board, row, col, player):
    if board[row][col] == ' ':
        board[row][col] = player
        return True
    else:
        return False

# Function to play Tic Tac Toe
def play_game():
    # Initialize an empty 3x3 board
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'  # Player 'X' starts

    while True:
        print_board(board)
        print(f"Player {current_player}'s turn")

        # Get row and column from the player
        row = int(input("Enter row (0, 1, or 2): "))
        col = int(input("Enter column (0, 1, or 2): "))

        # Make the move
        if make_move(board, row, col, current_player):
            # Check if the current player has won
            if check_winner(board, current_player):
                print_board(board)
                print(f"Player {current_player} wins!")
                break

            # Check if it's a draw
            if check_draw(board):
                print_board(board)
                print("It's a draw!")
                break

            # Switch player
            current_player = 'O' if current_player == 'X' else 'X'
        else:
            print("Invalid move! Try again.")

# Start the game
play_game()
